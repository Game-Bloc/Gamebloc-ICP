type Result = variant { Ok : nat8; Err : nat8 };
type Status = variant { Online; Offline };
type Squad = record {
    id_hash : text;
    captain : text;
    status : bool;
    members : vec text;
    requests : vec text;
};
type TournamentAccount = record {
  idx : nat8;
  id_hash : text;
  status : TournamentStatus;
  creator : text;
  game : text;
  squad : opt vec Squad;
  user : vec text;
  winers : vec text;
  total_prize : nat;
  tournament_rules : text;
  starting_date : text;
  no_of_participants : nat;
  no_of_winners : nat8;
  tournament_type : TournamentType;
  entry_prize : nat8;
  game_type: text;
  end_date: text;
  title: text;
};
type TournamentStatus = variant {
  AcceptingPlayers;
  GameInProgress;
  GameCompleted;
};

type TournamentType = variant { Prepaid; Crowdfunded };
type UserProfile = record {
  age : nat8;
  id_hash : text;
  status : Status;
  username : text;
  date : text;
  canister_id : text;
  wins : nat8;
  is_mod : bool;
  squad_badge : text;
  account_id : text;
  principal_id : text;
  tournaments_created : nat8;
};
service : {
  create_profile : (UserProfile, principal) -> (Result);
  create_tournament : (TournamentAccount) -> (Result);
  end_tournament : (text, vec text, principal) -> ();
  getSelf : (principal) -> (UserProfile) query;
  get_all_tournament : () -> (vec TournamentAccount) query;
  get_all_user : () -> (vec UserProfile) query;
  get_profile : (text) -> (UserProfile) query;
  get_tournament : (text) -> (TournamentAccount) query;
  is_mod : (text) -> (bool) query;
  join_tournament : (text, text) -> ();
  set_mod : (text, principal) -> ();
  start_tournament : (text) -> ();
}