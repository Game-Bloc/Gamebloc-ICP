type ClientPrincipal = principal;
type GatewayPrincipal = principal;
type ClientKey = record {
  client_principal : ClientPrincipal;
  client_nonce : nat64;
};

type WebsocketMessage = record {
  client_key : ClientKey;
  sequence_num : nat64;
  timestamp : nat64;
  is_service_message : bool;
  content : blob;
};

type CanisterOutputMessage = record {
  client_key : ClientKey;
  key : text;
  content : blob;
};

type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : blob;
  tree : blob;
  is_end_of_queue : bool;
};

type CanisterWsOpenArguments = record {
  client_nonce : nat64;
  gateway_principal : GatewayPrincipal;
};

type CanisterWsOpenResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsCloseArguments = record {
  client_key : ClientKey;
};

type CanisterWsCloseResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsMessageArguments = record {
  msg : WebsocketMessage;
};

type CanisterWsMessageResult = variant {
  Ok : null;
  Err : text;
};

type CanisterWsGetMessagesArguments = record {
  nonce : nat64;
};

type CanisterWsGetMessagesResult = variant {
  Ok : CanisterOutputCertifiedMessages;
  Err : text;
};

type Chat = record { id : text; name : text; time : text; message : text };
type Member = record { name : text; principal_id : text };
type Result = variant { Ok : nat8; Err : nat8 };
type Squad = record {
  tag : text;
  id_hash : text;
  status : SquadType;
  members : vec Member;
  name : text;
  captain : text;
  requests : vec text;
};
type SquadType = variant { Open; Closed };
type Status = variant { Online; Offline };
type TournamentAccount = record {
  idx : nat8;
  id_hash : text;
  status : TournamentStatus;
  title : text;
  creator : text;
  messages : opt vec Chat;
  creator_id : opt text;
  game : text;
  user : vec text;
  winers : vec text;
  total_prize : nat;
  end_date : text;
  tournament_rules : text;
  squad : vec Squad;
  game_type : text;
  starting_date : text;
  no_of_participants : nat;
  no_of_winners : nat8;
  tournament_type : TournamentType;
  entry_prize : nat8;
};
type TournamentStatus = variant {
  AcceptingPlayers;
  GameInProgress;
  GameCompleted;
};
type TournamentType = variant { Prepaid; Crowdfunded };

type UserProfile = record {
  age : nat8;
  account_id : text;
  id_hash : text;
  status : Status;
  username : text;
  date : text;
  canister_id : text;
  wins : nat8;
  is_mod : bool;
  principal_id : text;
  squad_badge : text;
  tournaments_created : nat8;
};

type CanisterSendResult = variant {
  Ok : null;
  Err : text;
};

type CanisterCloseResult = variant {
  Ok : null;
  Err : text;
};

type AppMessage = record {
  text : text;
};

service : () -> {
  add_to_squad : (Member, principal, text) -> ();
  close_squad : (text, vec text, principal) -> ();
  count_all_squad : () -> (nat) query;
  count_all_tournament : () -> (nat) query;
  count_all_users : () -> (nat) query;
  create_profile : (UserProfile, principal) -> (Result);
  create_squad : (Squad, principal) -> (Result);
  create_tournament : (TournamentAccount) -> (Result);
  end_tournament : (text, vec text, principal) -> ();
  getSelf : (principal) -> (UserProfile) query;
  get_all_squad : () -> (vec Squad) query;
  get_all_tournament : () -> (vec TournamentAccount) query;
  get_all_user : () -> (vec UserProfile) query;
  get_profile : (text) -> (UserProfile) query;
  get_squad : (text) -> (Squad) query;
  get_tournament : (text) -> (TournamentAccount) query;
  is_mod : (text) -> (bool) query;
  join_squad : (Member, principal, text) -> ();
  join_tournament : (text, text) -> ();
  join_tournament_with_squad : (text, text) -> ();
  leave_or_remove_squad_member : (principal, text) -> ();
  open_squad : (text, vec text, principal) -> ();
  send_message_tournament : (text, Chat) -> ();
  set_mod : (text, principal) -> ();
  start_tournament : (text) -> ();
  update_squad_details : (text) -> ();
    "ws_open" : (CanisterWsOpenArguments) -> (CanisterWsOpenResult);
    "ws_close" : (CanisterWsCloseArguments) -> (CanisterWsCloseResult);
    "ws_message" : (CanisterWsMessageArguments, opt AppMessage) -> (CanisterWsMessageResult);
    "ws_get_messages" : (CanisterWsGetMessagesArguments) -> (CanisterWsGetMessagesResult) query;

    // methods used just for debugging/testing
    "send" : (ClientPrincipal, vec blob) -> (CanisterSendResult);
    "close" : (ClientPrincipal) -> (CanisterCloseResult);
    "wipe" : (nat64, nat64) -> ();

}
