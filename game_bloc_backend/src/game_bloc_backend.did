type AppMessage = record { "text" : text; timestamp : nat64 };
type CanisterOutputCertifiedMessages = record {
  messages : vec CanisterOutputMessage;
  cert : vec nat8;
  tree : vec nat8;
  is_end_of_queue : bool;
};
type CanisterOutputMessage = record {
  key : text;
  content : vec nat8;
  client_key : ClientKey;
};
type CanisterWsCloseArguments = record { client_key : ClientKey };
type CanisterWsGetMessagesArguments = record { nonce : nat64 };
type CanisterWsMessageArguments = record { msg : WebsocketMessage };
type CanisterWsOpenArguments = record {
  gateway_principal : principal;
  client_nonce : nat64;
};
type Chat = record { id : text; name : text; time : text; message : text };
type ClientKey = record { client_principal : principal; client_nonce : nat64 };
type GameType = variant { Duo; Squad; TeamvTeam; Single };
type LobbyAccount = record {
  idx : nat8;
  status : TournamentStatus;
  participants : vec text;
  messages : opt vec Chat;
  game : text;
  name : opt text;
  winers : vec text;
  squads : vec Squad;
  lobby_status : LobbyStatus;
  game_type : GameType;
  starting_date : opt text;
  no_of_participants : nat;
  no_of_winners : opt nat8;
  tournament_type : TournamentType;
  lobby_rules : text;
};
type LobbyStatus = variant { GameInProgress; ReadyToStart; GameCompleted };
type Member = record { name : text; principal_id : text };
type Result = variant { Ok : nat8; Err : nat8 };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : CanisterOutputCertifiedMessages; Err : text };
type Role = variant { Mod; Player };
type Squad = record {
  tag : text;
  id_hash : text;
  status : SquadType;
  members : vec Member;
  name : text;
  captain : text;
  requests : vec text;
  points : opt nat;
};
type SquadType = variant { Open; Closed };
type Status = variant { Online; Offline };
type TournamentAccount = record {
  idx : nat8;
  id_hash : text;
  status : TournamentStatus;
  title : text;
  creator : text;
  messages : opt vec Chat;
  creator_id : opt text;
  game : text;
  user : vec text;
  in_game_names : opt vec record { text; text };
  winers : vec text;
  total_prize : nat;
  end_date : text;
  tournament_rules : text;
  squad_in_game_names : opt vec vec record { text; text };
  squad : vec Squad;
  lobbies : opt vec LobbyAccount;
  game_type : GameType;
  starting_date : text;
  no_of_participants : nat;
  no_of_winners : nat8;
  tournament_type : TournamentType;
  entry_prize : nat8;
  points : opt vec record { text; nat };
  squad_points : opt vec record { text; nat };
};
type TournamentStatus = variant {
  AcceptingPlayers;
  GameInProgress;
  Archived;
  GameCompleted;
};
type TournamentType = variant { Prepaid; Crowdfunded };
type UserProfile = record {
  age : nat8;
  account_id : text;
  id_hash : text;
  status : Status;
  username : text;
  date : text;
  role : Role;
  canister_id : text;
  wins : nat8;
  is_mod : bool;
  principal_id : text;
  squad_badge : text;
  tournaments_created : nat8;
  points : opt nat;
};
type WebsocketMessage = record {
  sequence_num : nat64;
  content : vec nat8;
  client_key : ClientKey;
  timestamp : nat64;
  is_service_message : bool;
};
service : () -> {
  add_to_squad : (Member, principal, text) -> ();
  assign_solo_points_and_end_lobby : (
      text,
      vec record { text; nat },
      principal,
      nat8,
    ) -> ();
  assign_squad_points_and_end_lobby : (
      text,
      vec record { text; nat },
      principal,
      nat8,
    ) -> ();
  close_squad : (text, vec text, principal) -> ();
  count_all_squad : () -> (nat) query;
  count_all_tournament : () -> (nat) query;
  count_all_users : () -> (nat) query;
  count_tournament_lobbies : (text) -> (nat) query;
  create_new_lobbies_from_winners : (text) -> (Result);
  create_profile : (UserProfile, principal) -> (Result);
  create_squad : (Squad, principal) -> (Result);
  create_tournament : (TournamentAccount) -> (Result);
  end_tournament : (text, vec text, principal) -> ();
  getSelf : (principal) -> (UserProfile) query;
  get_all_squad : () -> (vec Squad) query;
  get_all_tournament : () -> (vec TournamentAccount) query;
  get_all_tournament_lobbies : (text) -> (vec LobbyAccount) query;
  get_all_user : () -> (vec UserProfile) query;
  get_lobby_from_tournament : (text, nat8) -> (LobbyAccount) query;
  get_profile : (text) -> (UserProfile) query;
  get_squad : (text) -> (Squad) query;
  get_tournament : (text) -> (TournamentAccount) query;
  is_mod : (principal) -> (bool) query;
  join_squad : (Member, principal, text) -> ();
  join_tournament : (text, text, record { text; text }) -> ();
  join_tournament_with_squad : (
      text,
      text,
      vec record { text; text },
      vec record { text; text },
    ) -> ();
  leave_or_remove_squad_member : (principal, text) -> ();
  open_squad : (text, vec text, principal) -> ();
  send_message_tournament : (text, Chat) -> ();
  set_mod : (principal) -> ();
  start_tournament : (text) -> ();
  structure_tournament_into_duo_lobbies : (text, text) -> ();
  structure_tournament_into_lobbies : (text) -> ();
  update_squad_details : (text) -> ();
  ws_close : (CanisterWsCloseArguments) -> (Result_1);
  ws_get_messages : (CanisterWsGetMessagesArguments) -> (Result_2) query;
  ws_message : (CanisterWsMessageArguments, opt AppMessage) -> (Result_1);
  ws_open : (CanisterWsOpenArguments) -> (Result_1);
}
